----------------------------------------------------------------------------------------
Minimum usage TODOs:
Quit ":q"
Search "/" and "?"
Jump to end "G"
----------------------------------------------------------------------------------------
Feature: Cmd-Mode
<strg>u
	scroll half screen up
<strg>d
	scroll half screen down
/<regex><ENTER>
	springt bis regex match
n / N
	springt weiter zum nächsten/vorherigen match
	
----------------------------------------------------------------------------------------
Feature: Ex-parser/executor, implemented using JavaCC?
:q 
:wq
	exit
:<zahl>
:+<zahl>
:-<zahl>
	springt cursor zur Zeile, ggf relativ
:/<regex>
	springt cursor zum nächsten match/Zeile
:ow/<regex>
:ot/<regex>
    öffnet ein neues Window/Tab mit per regex gefiltertem linesModel

----------------------------------------------------------------------------------------
Make AwtView render ScreenModel, not LineModel
Wiring should be/is:

Controller changes
-->LinesModel
	--> ???
-->ViewModel changes
	-->ScreenModel is rendered by
		-->View
-->CursorModel
	-->ViewModel
----------------------------------------------------------------------------------------
Order classes into packages
----------------------------------------------------------------------------------------
Upd 2017-07-14: Inzwischen entschieden auf: https://pholser.github.io/jopt-simple/

CLI, parsing of args

Apache, declarative in java code:
https://commons.apache.org/proper/commons-cli/
https://dzone.com/articles/java-command-line-interfaces-part-1-apache-commons?utm_medium=feed&utm_source=feedpress.me&utm_campaign=Feed:%20dzone%2Fjava

args4j, declarative by annotations:
http://args4j.kohsuke.org/
https://www.javacodegeeks.com/2017/06/java-command-line-interfaces-part-2-args4j.html?_utm_source=1-2-2

----------------------------------------------------------------------------------------
Umlaute: ��� ��� �
Java arbeitet mit char, gespeichert werden byte.
Es ist je eine Konvertierung durchzuführen, mithin muss das char-encoding
"dynamisch" bestimmbar sein.
Möglichst getrennt für Lesen und für Schreiben.
----------------------------------------------------------------------------------------
Mehrzeilige Darstellung von Zeilen l�nger als die Fensterbreite.
Um das korrekt zu machen soll muss das Datenmodell "in mehreren Schichten" definiert
werden:
DataModel
  Letztlich sind dies die Zeilen im File/Buffer.
ScreenRaster
  Spalten x Zeilen Schachbrett, also die sichtbare, verf�gbare "Zeichenfl�che"
ViewModel
  Abbildung DataModel->ScreenRaster. Also f�r jede Zeile die Info wie viele
  ScreenZeilen, letztlich die �bersetzung DataModel[x1][y1] -> ScreenRaster[x2][y2].
  Also die Info welche Zeile des DataModel wird in welcher Zeile des ScreenModel
  dargestellt, und dasselbe f�r einzelne Chars und Spalten (Tabulatorproblem).
CursorModel
  CursorPosition im ViewModel
----------------------------------------------------------------------------------------
command line mode instead of awt window
may be: https://github.com/mabe02/lanterna/blob/master/docs/tutorial/Tutorial01.md
lanterna implements an interface named "Terminal" in several ways, which could
work for this project.
----------------------------------------------------------------------------------------

****************************************************************************************
*************************************** DONE *******************************************
****************************************************************************************
----------------------------------------------------------------------------------------
Änderungen in der Größe des GUI-Fensters sollen/m�ssen sich auf die grö´e des
View-Bereiches auswirken.
Dabei ist ggf auf die Änderung der Größe des Buffer-Images zu be�rcksichtigen.
----------------------------------------------------------------------------------------
done 2017-06-18
Spring-Initialisierung
pom.xml packaging fat jar with main class in manifest
Eventuell doch ein spring-boot... nochmal probieren, ob ein einfaches HelloWorld
nicht doch irgendwie funktioniert.
2017-06-17 DONE

Jetzt noch die App Initialisierung springifizieren, d.h. alle Componenten
als Beans defineren, und injecten.

...was nicht so einfach ist:
Es gibt praktisch keine Singletons, sondern mehrere Scopes, zB den swing JFrame,
eines der Models (es k�nnen ja mehrere Files gleichzeitig "offen" sein), etc.

Deshalb kann man nicht einfach alle Objekte als Beans definieren. Explizit Scopes 
zu implementieren scheint auch eher aufw�ndig.
Deshalb gehen wir nun wie folgt vor:
Alle relevanten Klassen werden als "prototype" beans definiert.
F�r alle relevanten Interfaces gibt es je eine Factory-Klasse, diese ist ein singleton
bean. Die implementierung dieser FactoryKlassen erzeugt die Objekte je �ber Aufrufe
zu context.getBean("name", constructorArg, ...);

Somit kann dann im Applikations-Code je wenn ben�tigt �ber eine (oder mehrere) der
Factory-Objekte beliebig neue Objekte erzeugt werden.
Gleichzeitig sind diese Objekte aber auch alle beans, so das beliebige Services
etc injected werden k�nnen.
----------------------------------------------------------------------------------------
done 2017-06-11 (
Double buffering, Application Thread
S�mtlicher Keyboard-Input soll als KeyEvent in eine Input-Queue geschrieben werden.
Der ViController liesst dann in einem separaten Application-Thread aus eben dieser Queue,
und erzeugt somit alle Model-Changes im Application-Thread.
Der AwtView, also der Listener aller Model-Objekte, Rendert diese Model-Changes dann in
ein Buffer-Image.
Nach jeder solcher Render-Aktion wird repaint(clip_area) aufgerufen.
Die paint(Graphics g) -Methode der Component kopiert dann nur noch den clip-Bereich
aus dem Buffer-Image in den Graphics-Context g.

Als Application-Thread kann ggf der MainThread verwendet werden.
Notwendig ist warscheinlich auch eine Synchronisation der Zugriffe auf das Buffer-Image.

2017-06-10
* der erhoffte Effekte, das es nicht mehr flackert, ist nicht eingetreten.
* aber, es wird nach wie vor bei jedem repaint _alle_ neu gezeichnet, mgl besseres
  Verhalten wenn optimiert gerendert wird, insbesondere auch der Cursor.

2017-06-11
Inzwischen wurde umgestellt auf Swing anstatt AWT, damit kein Flickern mehr.
----------------------------------------------------------------------------------------

