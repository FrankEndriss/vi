/**
 * This parser parses the ex commands, that is what you enter after the ":" in vi mode
 * See:
 * http://www.unix.com/man-page/posix/1p/ex
 * http://www.unix.com/man-page/posix/1p/vi
**/

options
{
	STATIC=false;
	USER_TOKEN_MANAGER=false;
	FORCE_LA_CHECK=true;
	TOKEN_MANAGER_USES_PARSER=true;
	DEBUG_PARSER=true;
	DEBUG_TOKEN_MANAGER=true;
	LOOKAHEAD=2;
}
PARSER_BEGIN(ExParser)

package com.happypeople.vi.exparser;
import java.util.*;

public class ExParser
{
	final boolean DEBUG=false;
	
// http://www.engr.mun.ca/~theo/JavaCC-FAQ/SetState.txt
// JavaCC hack for doing lexical state transitions syntactically
private void SetState(int state) {
  if (state != token_source.curLexState) {
    Token root = new Token(), last=root;
    root.next = null;

    // First, we build a list of tokens to push back, in backwards order
    while (token.next != null) {
      Token t = token;
      // Find the token whose token.next is the last in the chain
      while (t.next != null && t.next.next != null)
        t = t.next;

      // put it at the end of the new chain
      last.next = t.next;
      last = t.next;

      // If there are special tokens, these go before the regular tokens,
      // so we want to push them back onto the input stream in the order
      // we find them along the specialToken chain.

      if (t.next.specialToken != null) {
        Token tt=t.next.specialToken;
        while (tt != null) {
          last.next = tt;
          last = tt;
          tt.next = null;
          tt = tt.specialToken;
        }
      }
      t.next = null;
    };

    while (root.next != null) {
      token_source.backup(root.next.image.length());
      root.next = root.next.next;
    }
    jj_ntk = -1;
    token_source.SwitchTo(state);
  }
}
	
}

PARSER_END(ExParser)

TOKEN_MGR_DECLS:
{
	///final boolean DEBUG=false;

	// Required by SetState
	void backup(final int n) {
		input_stream.backup(n);
	}
}
	
/** DEFAULT state at start */
TOKEN:
{
	< SEMICOLON	: ";" >
|	< NEWLINE	: "\n" >						/* ends input						*/
}

<*> TOKEN:
{
	<WS					: ([ " ", "\t" ])+ >
}

// States for parsing the arguments to the Abbreviation command
<ABBREV_LHS_STATE> TOKEN:
{
// Anything but WS
// TODO What about escaped WS?
	< LHS	: (~[" ", "\t", "\r", "\n"])+ >
}

<ABBREV_RHS_STATE> TOKEN:
{
// Anything up to NL
// RHS must not be empty and can contain anything (including escaped NL) up to a NL
// iE any excaped char or anything but backslash or nl
	< RHS	: ("\\" ~[] | ~["\\", "\n"])+ >
}

// States for parsing regular expressions
// Note: can a regex be emtpy?
<SLASH_REGEX_STATE> TOKEN:
{
	<ANYTHING_BUT_SLASH: (~["/"])+ >
}
<QUESTION_REGEX_STATE> TOKEN:
{
	<ANYTHING_BUT_QUESTION: (~["?"])+ >
}

/** This parses an ex command line
*/
List<ExCommand> exCommandLine():
{
List<ExCommand> ret;
}
{
	ret=exCommands() ( <NEWLINE> | <EOF> )
	{ return ret; }
}

List<ExCommand> exCommands():
{
List<ExCommand> ret=new ArrayList<ExCommand>();
List<ExCommand> tmpList;
ExCommand tmpCmd;
}
{
	(<WS>|<SEMICOLON>)* tmpCmd=exCommand() { ret.add(tmpCmd); } ( <SEMICOLON> tmpList=exCommands() { ret.addAll(tmpList); } )?
	{ return ret; }
}

ExCommand exCommand():
{
ExCommand ret=null;
List<Address> addressList=Arrays.asList(ExAddress.FIRST, ExAddress.DOLLAR);
}
{
	(
	ret=abbreviation_cmd()
|	ret=unabbreviation_cmd()
|	ret=args_cmd()
|	ret=cd_cmd()
|	ret=quit_cmd()
|	(addressList=address_list())? ret=addressed_cmd(addressList)
	)	{ return ret; }
}

// commands with address prefixes, like "1,$s/foo/bar"
ExCommand addressed_cmd(final List<Address> addressList):
{
ExCommand ret;
}
{
(
	ret=delete_cmd(addressList)
|	ret=copy_cmd(addressList)
|	ret=write_cmd(addressList)
) { return ret; }
}

// [2addr] d[elete][buffer][count][flags]
DeleteCmd delete_cmd(List<Address> addressList):
{
BufferRef bufferRef=BufferRef.DEFAULT_BUFFER;
long number=0;
}
{
	DEL_CMD() (bufferRef=buffername())? (number=NUMBER())? 			// (<FLAGS>)?
	{ return new DeleteCmd(addressList, bufferRef, number); }
}

void DEL_CMD():
{
}
{
	"d"("e"("l"("e"("t"("e")?)?)?)?)?
}

//   Copy
//       Synopsis:
//		     [2addr] co[py] 1addr [flags]
//		     [2addr] t 1addr [flags]
CopyCmd copy_cmd(List<Address> addressList):
{
Address adrTarget;
}
{
	( ( "t" | "co" ("p"("y")?)? ) adrTarget=address() 	// flags 
	) { return new CopyCmd(addressList, adrTarget); }

}

// < NUMBER	: "0" | ["1"-"9"](["0"-"9"])* >
// Limited to Long
long NUMBER():
{
StringBuilder sb=new StringBuilder();
Token t;
}
{
	( "0" { sb.append("0"); } | t=pos_num() { sb.append(t.image); } ( t=num() { sb.append(t.image); } )*
	) { return Long.parseLong(sb.toString()); }
}

BufferRef buffername():
{
Token t;
}
{
	// doublequote followed by a single alphanumeric
	// * is special for the system clipboard
	"\"" (
		t="a" |t="b" |t="c" |t="d" |t="e" |t="f" |t="g" |t="h" |t="i" |t="j" |
		t="k" |t="l" |t="m" |t="n" |t="o" |t="p" |t="q" |t="r" |t="s" |t="t" |
		t="u" |t="v" |t="w" |t="x" |t="y" |t="z" |t="A" |t="B" |t="C" |t="D" |
		t="E" |t="F" |t="G" |t="H" |t="I" |t="J" |t="K" |t="L" |t="M" |t="N" |
		t="O" |t="P" |t="Q" |t="R" |t="S" |t="T" |t="U" |t="V" |t="W" |t="X" |
		t="Y" |t="Z" |t="0" |t="1" |t="2" |t="3" |t="4" |t="5" |t="6" |t="7" |
		t="8" |t="9" |t="*")
	{ return new BufferRef(t.image.charAt(0)); }
}

// addresses prefix
List<Address> address_list():
{
List<Address> ret=new ArrayList<Address>();
List<Address> tmpList=new ArrayList<Address>();
Address tmpAddress;
}
{
// TODO check spec if "%" can be in address_list(), or must stand alone
(	"%" { ret.add(ExAddress.FIRST); ret.add(ExAddress.DOLLAR); }
|	tmpAddress=address() { ret.add(tmpAddress); } ) ( "," tmpList=address_list()  { ret.addAll(tmpList); } )?
	{ return ret; }
}

Address address():
{
Address simpleAddress=ExAddress.DOT;
long offset=0;
}
{
(
	simpleAddress=simple_address() ( offset=address_offset_list() )?
|	offset=address_offset_list()
) { return new ExAddress(simpleAddress, offset); }
}

long address_offset_list():
{
long offset1=0;
long offset2=0;
}
{
	( offset1=address_offset() ( offset2=address_offset_list() )? )
	{ return offset1+offset2; }
}

long address_offset():
{
int mul=0;
long num=1;
}
{
	( ( "+" { mul=1; } | "-" { mul=-1; } ) ( num=NUMBER() )? )
	{ return num*mul; }
}

Address simple_address():
{
Address ret=null;
long num=0;
}
{
(
	"."			{ ret=ExAddress.DOT;		}		// current line
|	"$"			{ ret=ExAddress.DOLLAR;		}		// last line
|	num=NUMBER() { ret=new AbsoluteAddress(num); }	// that line
|	ret=regex()									// next/prev line matching
) { return ret; }
}

// ar[gs]
ArgsCmd args_cmd():
{
}
{
	"ar" ("g"("s")?)?
	{ return new ArgsCmd(); }
}

// chd[ir][!][directory]
// cd[!][directory]
CdCmd cd_cmd():
{
String fileName;
boolean withExclamation=false;
}
{
// Note: the WS might be optional, but causes a choice conflict
	CD_CMD() ("!" { withExclamation=true; } )? <WS> fileName=filename()
	{ return new CdCmd(withExclamation, fileName); }
}

public void CD_CMD():
{
}
{
	( "cd" | "chd" ("i"("r")?)? ) 
}


// ab[breviate][lhs rhs]
AbbreviationCmd abbreviation_cmd():
{
Token lhs=null;
Token rhs=null;
}
{
// Note: the first WS might be optional, but that would cause a choice conflict
	ABBREVIATION_CMD() { SetState(ABBREV_LHS_STATE); } ( <WS> lhs=<LHS> <WS> { SetState(ABBREV_RHS_STATE); } rhs=<RHS> )?
	{	return new AbbreviationCmd(lhs!=null?lhs.image:null, rhs!=null?rhs.image:null); }
}

// una[bbrev] lhs
UnabbreviationCmd unabbreviation_cmd():
{
Token lhs=null;
}
{
	UNABBREVIATION_CMD() <WS> { SetState(ABBREV_LHS_STATE); } lhs=<LHS> 
	{	return new UnabbreviationCmd(lhs.image); }
}


void UNABBREVIATION_CMD():
{
}
{
	"una" ("b"("b"("r"("e"("v"("i"("a"("t"("e")?)?)?)?)?)?)?)?)?
}

void ABBREVIATION_CMD():
{
}
{
	"ab" ("b"("r"("e"("v"("i"("a"("t"("e")?)?)?)?)?)?)?)?
}

/** @return the between the slashes, ie the regex as a String
 */
RegexAddress regex():
{
Token t;
RegexAddress.Dir direction=null;
}
{
	( "/" { direction=RegexAddress.Dir.FORWARD; SetState(SLASH_REGEX_STATE); 	}	t=<ANYTHING_BUT_SLASH> 		"/"
|	"?" { direction=RegexAddress.Dir.BACKWARD; SetState(QUESTION_REGEX_STATE);	}	t=<ANYTHING_BUT_QUESTION>	"?"
	)
	{	SetState(DEFAULT); 
		return new RegexAddress(direction, t.image);
	}
}


//   Write
//	     [2addr] w[rite][!][>>][file]
//	     [2addr] w[rite][!][file]
//	     [2addr] wq[!][>>][file]
//     If no lines are specified, the lines shall default to the entire file.
//   Write and Exit
//	     [2addr] x[it][!][file]
ExCommand write_cmd(List<Address> addressList):
{
boolean doQuit=false;
boolean exclam=false;
boolean append=false;
String fileName=null;
}
{
(
	(
	"w"("r"("i"("t"("e")?)?)?)?
	| "wq" { doQuit=true; }
	| "x"("i"("t")?)? { doQuit=true; }
	) ("!" { exclam=true; })? (">>" { append=true; })? (fileName=filename())?
) {	ExCommand wCmd=new WriteCommand(exclam, append, fileName);
	if(doQuit)
		return new ExecuteSecondIfFirstSucceedsCmd(wCmd, new QuitCommand(true));
	else
		return wCmd;
  }
}

//   Quit
//     q[uit][!]
ExCommand quit_cmd():
{
boolean exclam=false;
}
{
	"q"("u"("i"("t")?)?)? ("!" { exclam=true; } )?
	{ return new QuitCommand(exclam); }
}


String filename():
{
Token t;
StringBuilder sb=new StringBuilder();
}
{
// TODO check or find a way to deal with doublequote strings
	( (t=alphanum()|t="_"|t="$"|t="/"|t="."|t=":" ) { sb.append(t.image); } )+
	{ return sb.toString(); }
}


/** @return a token up to the next WS or NL
Token ANYTHING_BUT_WS_AND_NL():
{
Token t;
}
{
	{	System.out.println("SetState(ANYTHING_BUT_WS_AND_NL_STATE)");
		SetState(ANYTHING_BUT_WS_AND_NL_STATE);
	}
	t=<ANYTHING_BUT_WS_AND_NL>
	{ 	System.out.println("SetState(DEFAULT)");
		SetState(DEFAULT);
		return t;
	}
}
*/

/** @return a token up to the next NL
Token ANYTHING_BUT_NL():
{
Token t;
}
{
	{ SetState(ANYTHING_BUT_WS_AND_NL_STATE); }
	t=<ANYTHING_BUT_NL>
	{ SetState(DEFAULT); return t; }
}
*/

Token alphanum():
{
Token t;
}
{
	(t=num() | t=letter())
	{ return t; }
}

Token num():
{
Token t=null;
}
{
	(t="0" | t=pos_num())
	{ return t; }
}

Token pos_num():
{
Token t;
}
{
	(t="1"|t="2"|t="3"|t="4"|t="5"|t="6"|t="7"|t="8"|t="9")
	{ return t; }
}
Token letter():
{
Token t=null;
}
{
	(t=uppercase_letter() | t=lowercase_letter())
	{ return t; }
}

Token uppercase_letter():
{
Token t;
}
{
	(t="A"|t="B"|t="C"|t="D"|t="E"|t="F"|t="G"|t="H"|t="I"|t="J"|t="K"|t="L"|t="M"|t="N"|t="O"|t="P"|t="Q"|t="R"|t="S"|t="T"|t="U"|t="V"|t="W"|t="X"|t="Y"|t="Z")
	{ return t; }
}

Token lowercase_letter():
{
Token t;
}
{
	(t="a"|t="b"|t="c"|t="d"|t="e"|t="f"|t="g"|t="h"|t="i"|t="j"|t="k"|t="l"|t="m"|t="n"|t="o"|t="p"|t="q"|t="r"|t="s"|t="t"|t="u"|t="v"|t="w"|t="x"|t="y"|t="z")
	{ return t; }
}
